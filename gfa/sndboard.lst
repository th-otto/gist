'
' ----------------------------------------------------------------------------
'
' Name: SNDBOARD.GFA
' Desc: A Sound Board for all the GIST Effects for GFA 3.0+
' Auth: Derek J. Evans 2023
' Note: Max buttons (ie: effects) is 70
'
' ----------------------------------------------------------------------------
'
'
DEFWRD "a-z"
'
IF XBIOS(4)
  ~FORM_ALERT(1,"[1][|Low Resolution Required ][ OK ]")
  END
ENDIF
'
IF BYTE{ADD(BASEPAGE,256)}=96
  CHDIR "\GIST\"
ENDIF
'
main
'
END
'
PROCEDURE main
  ON ERROR GOSUB error
  ON BREAK GOSUB break
  '
  install_int
  '
  HIDEM
  CLS
  DEFMOUSE 0
  SPOKE &H484,BCLR(PEEK(&H484),0)
  SETCOLOR 0,0
  SETCOLOR 15,&H777
  GRAPHMODE 2
  '
  CLR sound.count&
  DIM sound.data$(100),sound.name$(100)
  '
  ~FSETDTA(BASEPAGE+128)
  a&=FSFIRST("SOUNDS\*.SND",-1)
  DO UNTIL a&
    LET sound.name$(sound.count&)=CHAR{BASEPAGE+158}
    INC sound.count&
    LET a&=FSNEXT()
  LOOP
  '
  FOR i&=0 TO PRED(sound.count&)
    OPEN "I",#1,"SOUNDS\"+sound.name$(i&)
    IF LOF(#1)=112
      LET sound.data$(i&)=INPUT$(112,#1)
    ENDIF
    CLOSE #1
  NEXT i&
  '
  DEFTEXT ,,,4
  FOR y&=0 TO 13
    FOR x&=0 TO 4
      ~@draw.button(x&,y&,FALSE)
    NEXT x&
  NEXT y&
  '
  DO
    SHOWM
    REPEAT
      exit!=INKEY$=CHR$(27)
    UNTIL MOUSEK OR exit!
    EXIT IF exit!
    HIDEM
    LET x&=MOUSEX\64
    LET y&=MOUSEY\14
    ~@snd_on(V:sound.data$(@draw.button(x&,y&,TRUE)),-1,15,-1,5)
    SHOWM
    REPEAT
    UNTIL MOUSEK=0
    HIDEM
    ~@draw.button(x&,y&,FALSE)
  LOOP
  @remove_int
  CLS
  SETCOLOR 0,&H777
  SETCOLOR 15,0
RETURN
'
FUNCTION draw.button(x&,y&,select!)
  LOCAL s&,s$,x1&,y1&,x2&,y2&
  LET s&=(y&*5+x&) MOD sound.count&
  LET s$=LEFT$(sound.name$(s&),INSTR(sound.name$(s&),".")-1)
  LET x1&=x&*64
  LET y1&=y&*14
  LET x2&=x1&+62
  LET y2&=y1&+12
  IF select!
    DEFFILL 2
  ELSE
    DEFFILL 4
  ENDIF
  PBOX x1&+2,y1&+2,x2&-2,y2&-2
  COLOR 1
  BOX x1&,y1&,x2&,y2&
  DEFTEXT 0
  TEXT x1&+5,y1&+9,s$
  DEFTEXT 1
  TEXT x1&+4,y1&+8,s$
  RETURN s&
ENDFUNC
'
PROCEDURE break
  @remove_int
  END
RETURN
'
PROCEDURE error
  @remove_int
RETURN
'
' ----------------------------------------------------------------------------
'
' GIST Library for GFA BASIC 2.0+
'
' ----------------------------------------------------------------------------
'
' @install_int will install the interrupt routine. The vector for
' the 200 Hz system timer interrupt routine is set to point to the
' sound interrupt routine. This routine MUST be called after @appl_init
' and before any of the below routines are called.
'
PROCEDURE install_int
  LOCAL buf%
  IF DIM?(gistdrvr%())=0
    OPEN "I",#1,"gistdrvn.prg"
    DIM gistdrvr%(3000\4)
    BGET #1,VARPTR(gistdrvr%(0)),LOF(#1)
    CLOSE #1
    LET buf%=VARPTR(gistdrvr%(0))
    LET install_int%=buf%
    IF LONG{buf%+2}=1962 AND LONG{buf%+6}=208 AND LONG{buf%+10}=424 AND WORD{buf%+28}=&H41FA
      ' we got the original driver; use fixed offsets
      LET remove_int%=buf%+148
      LET init_snds%=buf%+176
      LET snd_on%=buf%+210
      LET stop_snd%=buf%+704
      LET snd_off%=buf%+782
      LET get_prior%=buf%+868
    ELSE
      ' new version has the offsets embedded
      buf%=buf%+28
      LET remove_int%=buf%+WORD{buf%+2}
      LET init_snds%=buf%+WORD{buf%+4}
      LET snd_on%=buf%+WORD{buf%+6}
      LET stop_snd%=buf%+WORD{buf%+8}
      LET snd_off%=buf%+WORD{buf%+10}
      LET get_prior%=buf%+WORD{buf%+12}
    ENDIF
    VOID C:install_int%()
  ENDIF
RETURN
'
' ----------------------------------------------------------------------------
'
' @remove_int will remove the interrupt routine. The 200 Hz system timer
' interrupt routine vector is returned to its normal location. This
' routine MUST be called prior to @appl_exit. None of the below routines
' should be called after this routine.
'
PROCEDURE remove_int
  IF DIM?(gistdrvr%())
    VOID C:remove_int%()
    ERASE gistdrvr%()
  ENDIF
RETURN
'
' ----------------------------------------------------------------------------
'
' @init_snds will completely stop sound on all channels.
'
PROCEDURE init_snds
  VOID C:init_snds%()
RETURN
'
' ----------------------------------------------------------------------------
'
' @get_prior will return the priority of the requested voice. This
' routine is useful if you have a case where a @snd_off might turn off
' the wrong sound. You can call @get_prior and issue the @snd_off only
' if the priority matches the original.
'
' @get_prior(voice%)
'
' voice% = the voice whose priority is requested (0, 1 or 2)
'
' NOTE: type WORD is always returned
'
DEFFN get_prior(a%)=C:get_prior%(a%)
'
' ----------------------------------------------------------------------------
'
' @snd_on will play a sound that was created using GIST and stored as a
' GFA source code (DATA) on a channel of the GI chip.
'
' @snd_on(sndptr%,voice%,volume%,pitch%,priority%)
'
' sndptr%   = the pointer to the array of parameters known as
'             sound data, e.g., VARPTR(drwho%(0)).
'
' voice%    = the voice number corresponding to the GI channel number
'             0, 1, or 2. A -1 tells the sound driver to use any
'             available channel.
'
' volume%   = volume of the sound (0-15) or -1 to use volume
'             stored with sound data.
'
' pitch%    = the pitch of the sound. When playing sound effects,
'             (pitch = -1) the sound will play using the frequency value
'             in the sound data; the duration is determined by the
'             duration value in the sound data. A @snd_off will
'             automatically be issued when the duration has elapsed.
'             When playing musical tones, pitch (24-108) corresponds
'             to the semitone number.
'                 60 = middle C on a piano keyboard or 262 Hz;
'                 72 = one octave above;
'                 This is the same as MIDI pitch numbers.
'             The sound will remain on until a @snd_off is issued.
'             In other words, if pitch = -1, it is considered a sound effect.
'             If pitch is specified, it is considered a musical note.
'
' priority% = priority of the sound (0-32767) where the higher the value,
'             the higher the priority. Equal values take precedence over
'             each other.  When a @snd_off is issued, the priority is reduced
'             to zero during the release phase of any sound. Thus, priority
'             should normally set set to at least 1.
'
' The voice number used will be returned. If no voice was available, -1
' is returned (NOTE: type WORD is always returned
'
DEFFN snd_on(a%,b%,c%,d%,e%)=C:snd_on%(L:a%,b%,c%,d%,e%)
'
' ----------------------------------------------------------------------------
'
' @snd_off will cause the sound to move into its release phase and reduce
' the priority to zero.
'
' @snd_off(voice%)
'
' voice% = the voice which is to be moved into its release
'          phase (0, 1, or 2). Any other value has no effect.
'
PROCEDURE snd_off(voice%)
  VOID C:snd_off%(voice%)
RETURN
'
' ----------------------------------------------------------------------------
'
' @stop_snd will cause the sound to completely stop. No matter what phase
' the sound is in (attack, decay, sustain, or release), the sound will
' end. Unlike @snd_off, there is no release.
'
' @stop_snd(voice%)
'
' voice% = the voice which is to be stopped (0, 1 or 2).
'          Any other value has no effect.
'
PROCEDURE stop_snd(voice%)
  VOID C:stop_snd%(voice%)
RETURN
'
' ----------------------------------------------------------------------------
'
' @loadfile will load a file into an array of 32 bit ints.
' usage: @loadfile(*filedata%(),"filename.ext")
'
PROCEDURE loadfile(a%,filename$)
  SWAP *a%,result%()
  OPEN "I",#1,filename$
  DIM result%(LOF(#1)\4)
  BGET #1,VARPTR(result%(0)),LOF(#1)
  CLOSE #1
  SWAP *a%,result%()
RETURN
'
' ----------------------------------------------------------------------------
' END OF SOURCE
' ----------------------------------------------------------------------------
