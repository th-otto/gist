'
' ----------------------------------------------------------------------------
'
' Name: SNDBOARD.GFA
' Desc: A Sound Board for all the GIST Effects for GFA 3.0+
' Auth: Derek J. Evans 2023
' Note: Max buttons (ie: effects) is 70
'
' ----------------------------------------------------------------------------
'
'
DEFWRD "a-z"
reverse_video!=TRUE
button_width&=64
button_height&=14
screen_planes&=WORD{ADD(LONG{ADD(GB,4)},20)}
@vq_color(0,w.red&,w.green&,w.blue&)
' PRINT "white: ";w.red&;" ";w.green&;" ";w.blue&
@vq_color(1,b.red&,b.green&,b.blue&)
' PRINT "black: ";b.red&;" ";b.green&;" ";b.blue&
old_conterm|=PEEK(&H484)
SPOKE &H484,BCLR(old_conterm|,0)
'
IF BYTE{ADD(BASEPAGE,256)}=96
  CHDIR "\GIST\"
ENDIF
'
CLR install_int%
main
'
END
'
PROCEDURE calc_maxsounds
  ~WIND_GET(0,4,desk.x&,desk.y&,desk.w&,desk.h&)
  max_x&=(desk.x&+desk.w&) DIV button_width&
  max_y&=(desk.y&+desk.h&) DIV button_height&
  max_sounds&=max_x&*max_y&
RETURN
'
PROCEDURE load_sounds
  CLR sound.count&
  '
  @calc_maxsounds
  DIM sound.data$(max_sounds&),sound.name$(max_sounds&)
  ~FSETDTA(BASEPAGE+128)
  a&=FSFIRST("SOUNDS\*.SND",-1)
  DO UNTIL a&
    EXIT IF sound.count&>=max_sounds&
    LET sound.name$(sound.count&)=CHAR{BASEPAGE+158}
    OPEN "I",#1,"SOUNDS\"+sound.name$(sound.count&)
    IF LOF(#1)=112
      LET sound.data$(sound.count&)=INPUT$(112,#1)
      INC sound.count&
    ENDIF
    CLOSE #1
    LET a&=FSNEXT()
  LOOP
RETURN
'
PROCEDURE main
  LOCAL snd&
  '
  ON ERROR GOSUB error
  ON BREAK GOSUB break
  '
  @load_sounds
  IF sound.count&=0
    ~FORM_ALERT(1,"[1][|No sounds found ][ Abort ]")
  ELSE
    '
    install_int
    '
    HIDEM
    GRAPHMODE 1
    IF reverse_video!
      @vs_color(0,0,0,0)
      @vs_color(1,1000,1000,1000)
    ENDIF
    CLS
    DEFMOUSE 0
    '
    DEFTEXT ,,,4
    FOR y&=0 TO max_y&-1
      FOR x&=0 TO max_x&-1
        ~@draw.button(x&,y&,FALSE)
      NEXT x&
    NEXT y&
    '
    DO
      SHOWM
      REPEAT
        exit!=INKEY$=CHR$(27)
      UNTIL MOUSEK OR exit!
      HIDEM
      EXIT IF exit!
      LET x&=MOUSEX\button_width&
      LET y&=MOUSEY\button_height&
      snd&=@draw.button(x&,y&,TRUE)
      IF snd&<sound.count&
        ~@snd_on(V:sound.data$(snd&),-1,15,-1,5)
      ENDIF
      SHOWM
      REPEAT
      UNTIL MOUSEK=0
      HIDEM
      ~@draw.button(x&,y&,FALSE)
    LOOP
    CLS
    @cleanup
    SHOWM
  ENDIF
RETURN
'
PROCEDURE cleanup
  @remove_int
  SPOKE &H484,old_conterm|
  IF reverse_video!
    @vs_color(0,w.red&,w.green&,w.blue&)
    @vs_color(1,b.red&,b.green&,b.blue&)
  ENDIF
RETURN
'
FUNCTION draw.button(x&,y&,select!)
  LOCAL s&,s$,x1&,y1&,x2&,y2&
  LET s&=(y&*max_x&+x&)
  LET x1&=x&*button_width&
  LET y1&=y&*button_height&
  LET x2&=x1&+button_width&-2
  LET y2&=y1&+button_height&-2
  GRAPHMODE 1
  IF select!
    IF screen_planes&<=1
      IF reverse_video!
        DEFFILL 1
      ELSE
        DEFFILL 0
      ENDIF
    ELSE
      IF screen_planes&<=2
        DEFFILL 2
      ELSE
        DEFFILL 2
      ENDIF
    ENDIF
  ELSE
    IF screen_planes&<=1
      IF reverse_video!
        DEFFILL 0
      ELSE
        DEFFILL 1
      ENDIF
    ELSE
      IF screen_planes&<=2
        DEFFILL 3
      ELSE
        DEFFILL 4
      ENDIF
    ENDIF
  ENDIF
  PBOX x1&+2,y1&+2,x2&-2,y2&-2
  IF reverse_video!
    COLOR 1
  ELSE
    COLOR 0
  ENDIF
  BOX x1&,y1&,x2&,y2&
  IF s&<sound.count&
    LET s$=LEFT$(sound.name$(s&),INSTR(sound.name$(s&),".")-1)
    GRAPHMODE 2
    IF reverse_video!
      DEFTEXT 0
    ELSE
      DEFTEXT 1
    ENDIF
    TEXT x1&+5,y1&+9,s$
    IF reverse_video!
      DEFTEXT 1
    ELSE
      DEFTEXT 0
    ENDIF
    TEXT x1&+4,y1&+8,s$
  ENDIF
  RETURN s&
ENDFUNC
'
PROCEDURE break
  @cleanup
  END
RETURN
'
PROCEDURE error
  @cleanup
RETURN
'
PROCEDURE vq_color(idx&,VAR red&,green&,blue&)
  INTIN(0)=idx&
  INTIN(1)=1
  VDISYS 26,2,0,0
  red&=INTOUT(1)
  green&=INTOUT(2)
  blue&=INTOUT(3)
RETURN
'
PROCEDURE vs_color(idx&,red&,green&,blue&)
  INTIN(0)=idx&
  INTIN(1)=red&
  INTIN(2)=green&
  INTIN(3)=blue&
  VDISYS 14,4,0,0
RETURN
'
' ----------------------------------------------------------------------------
'
' GIST Library for GFA BASIC 2.0+
'
' ----------------------------------------------------------------------------
'
' @install_int will install the interrupt routine. The vector for
' the 200 Hz system timer interrupt routine is set to point to the
' sound interrupt routine. This routine MUST be called after @appl_init
' and before any of the below routines are called.
'
PROCEDURE install_int
  LOCAL buf%
  IF DIM?(gistdrvr%())=0
    OPEN "I",#1,"gistdrvn.prg"
    DIM gistdrvr%(3000\4)
    BGET #1,VARPTR(gistdrvr%(0)),LOF(#1)
    CLOSE #1
    LET buf%=VARPTR(gistdrvr%(0))
    LET install_int%=buf%
    IF LONG{buf%+2}=1962 AND LONG{buf%+6}=208 AND LONG{buf%+10}=424 AND WORD{buf%+28}=&H41FA
      ' we got the original driver; use fixed offsets
      LET remove_int%=buf%+148
      LET init_snds%=buf%+176
      LET snd_on%=buf%+210
      LET stop_snd%=buf%+704
      LET snd_off%=buf%+782
      LET get_prior%=buf%+868
    ELSE
      ' new version has the offsets embedded
      buf%=ADD(buf%,28)
      LET remove_int%=buf%+WORD{ADD(buf%,2)}
      LET init_snds%=buf%+WORD{ADD(buf%,4)}
      LET snd_on%=buf%+WORD{ADD(buf%,6)}
      LET stop_snd%=buf%+WORD{ADD(buf%,8)}
      LET snd_off%=buf%+WORD{ADD(buf%,10)}
      LET get_prior%=buf%+WORD{ADD(buf%,12)}
    ENDIF
    VOID C:install_int%()
  ENDIF
RETURN
'
' ----------------------------------------------------------------------------
'
' @remove_int will remove the interrupt routine. The 200 Hz system timer
' interrupt routine vector is returned to its normal location. This
' routine MUST be called prior to @appl_exit. None of the below routines
' should be called after this routine.
'
PROCEDURE remove_int
  IF install_int%<>0
    VOID C:remove_int%()
    ERASE gistdrvr%()
    install_int%=0
  ENDIF
RETURN
'
' ----------------------------------------------------------------------------
'
' @init_snds will completely stop sound on all channels.
'
PROCEDURE init_snds
  VOID C:init_snds%()
RETURN
'
' ----------------------------------------------------------------------------
'
' @get_prior will return the priority of the requested voice. This
' routine is useful if you have a case where a @snd_off might turn off
' the wrong sound. You can call @get_prior and issue the @snd_off only
' if the priority matches the original.
'
' @get_prior(voice%)
'
' voice% = the voice whose priority is requested (0, 1 or 2)
'
' NOTE: type WORD is always returned
'
DEFFN get_prior(a%)=C:get_prior%(a%)
'
' ----------------------------------------------------------------------------
'
' @snd_on will play a sound that was created using GIST and stored as a
' GFA source code (DATA) on a channel of the GI chip.
'
' @snd_on(sndptr%,voice%,volume%,pitch%,priority%)
'
' sndptr%   = the pointer to the array of parameters known as
'             sound data, e.g., VARPTR(drwho%(0)).
'
' voice%    = the voice number corresponding to the GI channel number
'             0, 1, or 2. A -1 tells the sound driver to use any
'             available channel.
'
' volume%   = volume of the sound (0-15) or -1 to use volume
'             stored with sound data.
'
' pitch%    = the pitch of the sound. When playing sound effects,
'             (pitch = -1) the sound will play using the frequency value
'             in the sound data; the duration is determined by the
'             duration value in the sound data. A @snd_off will
'             automatically be issued when the duration has elapsed.
'             When playing musical tones, pitch (24-108) corresponds
'             to the semitone number.
'                 60 = middle C on a piano keyboard or 262 Hz;
'                 72 = one octave above;
'                 This is the same as MIDI pitch numbers.
'             The sound will remain on until a @snd_off is issued.
'             In other words, if pitch = -1, it is considered a sound effect.
'             If pitch is specified, it is considered a musical note.
'
' priority% = priority of the sound (0-32767) where the higher the value,
'             the higher the priority. Equal values take precedence over
'             each other.  When a @snd_off is issued, the priority is reduced
'             to zero during the release phase of any sound. Thus, priority
'             should normally set set to at least 1.
'
' The voice number used will be returned. If no voice was available, -1
' is returned (NOTE: type WORD is always returned
'
DEFFN snd_on(a%,b%,c%,d%,e%)=C:snd_on%(L:a%,b%,c%,d%,e%)
'
' ----------------------------------------------------------------------------
'
' @snd_off will cause the sound to move into its release phase and reduce
' the priority to zero.
'
' @snd_off(voice%)
'
' voice% = the voice which is to be moved into its release
'          phase (0, 1, or 2). Any other value has no effect.
'
PROCEDURE snd_off(voice%)
  VOID C:snd_off%(voice%)
RETURN
'
' ----------------------------------------------------------------------------
'
' @stop_snd will cause the sound to completely stop. No matter what phase
' the sound is in (attack, decay, sustain, or release), the sound will
' end. Unlike @snd_off, there is no release.
'
' @stop_snd(voice%)
'
' voice% = the voice which is to be stopped (0, 1 or 2).
'          Any other value has no effect.
'
PROCEDURE stop_snd(voice%)
  VOID C:stop_snd%(voice%)
RETURN
'
' ----------------------------------------------------------------------------
'
' @loadfile will load a file into an array of 32 bit ints.
' usage: @loadfile(*filedata%(),"filename.ext")
'
PROCEDURE loadfile(a%,filename$)
  SWAP *a%,result%()
  OPEN "I",#1,filename$
  DIM result%(LOF(#1)\4)
  BGET #1,VARPTR(result%(0)),LOF(#1)
  CLOSE #1
  SWAP *a%,result%()
RETURN
'
' ----------------------------------------------------------------------------
' END OF SOURCE
' ----------------------------------------------------------------------------
